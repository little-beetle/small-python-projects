def cap():
    """
    Функція друкує шапку програми, що виконує програма та її основну задачу
    :return: str
    """
    return "Лабораторна робота № - ТЕМА\n" \
           "Виконав студент групи ГРУПА ПРІЗВИЩЕ ТА ІМ'Я, варіант 14\n\n" \
           "Умова: користувач вводить два значення\n" \
           "\t1 - еталонне слово\n" \
           "\t2 - набір символів\n" \
           "Програма має обрати такі слова, які можуть утворитися зміною одного символа (у цьому слові)\n" \
           "щоб отримати еталонне слово\n" \
           "Також програма вважає символи, які написанні з малої або великої букви різними\n" \
           "Тобто якщо є еталонне слово 'кпі', а у рядку символів є слово 'КПІ',\n" \
           "то програма вважає це за два різних слова\n"


def beginning():
    """
    Функція питає у користувача чи хоче він почати чи вийти з програми
    Якщо користувач введе не те значення, то функція почнеться спочатку
    :return bool
    """
    print("Зараз Вам необхідно, що буде виконувати програма\n"
          "\t1 - почати вводити слова"
          "\t2 - вихід")
    choice = input("> ")  # користувач вводить значення
    # перевірка
    if choice == "1":
        return True
    elif choice == "2":
        return False
    # якщо користувач ввів, те що не передбаченно в програмі, то функція почнеться з самого початку
    else:
        print("ПОМИЛКА! Ви що не те ввели. Спробуйте ще раз!")
        return beginning()


def input_value():
    """
    Функція отримує від користувача два значення
    1 - еталонне слово
    2 - рядок символів
    Ці значення будуть використовуватися далі у програмі
    :return: main_word:str, words:str
    """
    print("Зараз необхідно ввести еталонне слова\n"
          "\t* це слово з яким програма буде порівнювати всі інші значення")
    main_word = input("> ")  # користувач еталонне значення
    print("Зараз необхідно ввести рядок символів")
    words = input("> ")  # користувач вводить рядок символів
    return main_word, words  # функція повертає значення, які ввів користувач


def audit_len(main_word, words):
    """
    Функція порівнює еталонне слово з іншими значеннями у рядку на довжину.
    Якщо довжини різні, то з цього випливає, що якщо у слові ЗАМІНИТИ один символ, не вийде еталонне слово
    :param main_word: еталонне слово:str
    :param words: рядок значення:str
    :return: список з однаковими довжинами слів: list
    """
    # перетворюємо рядок у список, за допомогою функції split()
    some_word = words.split()
    # створюємо новий список, куди будуть вписані необхідні значення
    same_len = []
    # цикл, який опрацьовує всі значення
    for i_word in some_word:
        # перевірка довжини
        if len(i_word) == len(main_word):
            # якщо довжини однакові, то додаємо це слово у новий список
            same_len.append(i_word)
    # повертаємо новий список
    return same_len


def similarity_check(main_word, same_len_words):
    """
    Це основна функція програма, яка виконує перевірку чи існує таке слова,
    якщо в цьому замінити один символ, то вийде еталонне слово
    :param main_word: еталонне слово:str
    :param same_len_words: список слів, які по довжині однаві з еталонним словом:list
    :return: список, який містить всі значення, які підходять для умови програми
    """
    # створюємо новий список
    answer = []
    # цикл, який опрацьовує всі значення зі списку слів
    for i_word in same_len_words:
        # додаємо лічильний, який буде рахувати кількість однакових літер у словах
        num = 0
        # створюємо два списки, куди будемо додавати різні літери відповідних слів
        letter_some_word = []
        letter_main_word = []
        for i in range(len(i_word)):  # цикл, отримує значення індекса літер
            if i_word[i] == main_word[i]:  # порівняння за індексом двох слів
                num += 1
            else:  # якщо літери різні, то додаємо до відповідних списків ці літери
                letter_some_word.append(i_word[i])
                letter_main_word.append(main_word[i])
        if num == len(main_word):  # якщо слова однакові
            print(f"Дане слово '{i_word}' є однаковим з еталоним - '{main_word}'")
        elif num + 1 == len(main_word):  # якщо слова відрізняються на один симловом, то додаємо його у список
            answer.append(i_word)
            print(
                f"УСПІХ! Якщо замінити слові '{i_word}' один символ {letter_some_word[0]} -> {letter_main_word[0]}, то отримаємо еталонне слово - '{main_word}'")
        else:  # якщо слова повністю відрізняються, то програма показує які літери відрізняються
            print(
                f"ПОМИЛКА! Якщо замінити один симлов у слові '{i_word}' ми ніяк не отримаємо еталонне слово '{main_word}'")
            print("Для того, щоб отримати еталонне слово, необхідно замінити такі символи")
            print("-" * 2 * len(letter_some_word))  # оформлення таблиці
            print(*letter_some_word)  # літери які відрізняються
            print("| " * len(letter_some_word))  # оформлення таблиці
            print("* " * len(letter_some_word))  # оформлення таблиці
            print(*letter_main_word)  # літери які відрізняються
            print("-" * 2 * len(letter_some_word))  # оформлення таблиці
    return answer  # повертаємо значення


print(cap())  # друк шапки
# цикл програми
while beginning():
    # отримуємо значення з функцій
    main_word, words = input_value()
    words_same_len = audit_len(main_word, words)
    result = similarity_check(main_word, words_same_len)
    # перевірка чи є результат
    if len(result) > 0:
        print("Отже необхідні слова: ")
        print(*result)
    else:
        print("Необіхних слів у програмі немає!")
    print("КІНЕЦЬ!")
