import sys


def greeting():
    """
    Функція виводить титилку програми на екран
    :return: str
    """
    return "Лабораторна робота №6 - ТЕМА\n" \
           "Виконав студент групи ГРУПА ПРІЗВИЩЕ ТА ІМ'Я, варіант 17\n\n" \
           "Умова: програма має вилучити всі слова, які стоять на непарних порядкових позиціях\n" \
           "А слова на парних позиціях надрукувати перевернутими\n" \
           "Рядок слів програма може отримати або з файлу ('17.txt') або ввести дані самостійно\n" \
           "І потім по бажанню зберегти отриманий регулятат в окрему папку.\n" \
           "\n\n*(користувач сам обирає, за що вважати початок відліку '0' або '1')"


def input_validation():
    """
    Функція перевіряє чи правиль користувач ввів дані, які програма може опрацювати
    Якщо користувач обере перший пункт, то програма отримає значення, які знаходяться в папці '17.txt'
    Якщо користувач обере другий пункт, то він самостійно буде вводити значення
    Якщо користувач обере третій пункт, то він вийде з програми.
    :return: числа 1 або 2 або 3
    """
    menu_check = input(">>> ")  # користувач вводить значення

    # перевірка умови
    if menu_check == "1":
        print("Ви обрали перший пункт в меню (отримати дані з файлу, який знаходиться у файлі '17.txt')")
        return int(menu_check)
    elif menu_check == "2":
        print("Ви обрали другий пункт в меню (ввести дані самостій)")
        return int(menu_check)
    elif menu_check == "3":
        print("ВИ обрали третій пункт в меню (вихід).\nБувайте!")
        return int(menu_check)
    return input_validation()  # якщо інші умови не були виконані, то функція починається з самого початку


def need_to_save():
    """
    Функція запитує у користувача чи хоче він зберегти значення, які отримає.
    Користувач може ввести 'так' - зберегти, 'ні' - не зберігати
    :return: bool
    """
    print("Чи хочете ви зберігти відповідь в окремий файл? (так | ні)")
    save = input(">>> ")
    # перевірка умови
    if save.lower().strip() == "так":  # функція lower() переводить всі букви в маленькі, а фукція strip прибирає пробіл
        return True
    elif save.lower().strip() == "ні":
        return False
    print("Програма не розуміє вашого вибору, слідкуйте УВАЖНО за вказівками!")
    return need_to_save()  # якщо попередні умови не були виконані, то почати спочатку


def date_file():
    """
    Функція отримує дані з файлу '17.txt'
    Якщо такого файлу не існує, то програма попередить про це і попросить виправити помилку в коді.
    :return: str
    """
    try:  # спроба відкрити файл
        with open("17.txt", encoding='utf-8') as file_name:  # відкриваємо файл і називаємо його file_name
            string_user = file_name.read()  # отримуємо всі значення
        return string_user  # повертаємо ці значення
    except:  # якщо не вийшло відкрити файл
        print("Щось пішло не так. Напевно ви вказали не той файл!")  # попередження, що щось пішло не так
        sys.exit()  # закриття програми


def input_str():
    """
    Функція отримує значення від користувача, з якими далі будуть проводитися дії
    :return: str
    """
    text_user = input(">>> ")  # вводимо значення
    if len(text_user.split()) == 0:  # якщо користувач нічого не ввів
        print("Якщо ви ввели менше одного слова, то результат буде наступним.\n"  # попередження, що що результат буде НІЧОГО
              "ВИ ОТРИМАЄТЕ НІЧОГО.\n"
              "Спробуйте ще раз")
        return input_str()  # повторна спроба ввести значення
    return text_user  # попернення цього значення


def menu():
    """
    Функція містить 3 можливих варіанти,
    1 - отримати дані з файлу '17.txt'
    2 - ввести дані самостійно
    3 - вихід
    :return: str
    """
    print("Зараз необіхно обрати, що буде виконувати програма.\n"
          "1 - отримати дані з файлу 17.txt та вивести слова відповідно до умови\n"
          "2 - самостійно ввести дані та вивести слова відповідно до умови\n"
          "3 - вихід\n")
    choice = input_validation()  # функція, яка перевіняє чи правильно користувач ввів дані
    if choice == 1:
        user_str = date_file()  # отримуємо значення з файлу
        return user_str  # повертаємо це значення
    elif choice == 2:
        user_str = input_str()  # вводимо значення самостійно
        return user_str  # повертаємо це значення
    elif choice == 3:
        sys.exit()  # вихід


def save_str(user_string):
    """
    Функція зберігає результат виконання в окремий файл
    :param user_string: результат програми, тобто перевернуті слова
    """
    print("Введіть назву файлу, в який хочете зберегти значення.")
    name_file = input(">>> ")
    file = "{name_file}{type_file}".format(name_file=name_file, type_file=".txt")  # назва файлу
    with open(file, "w", encoding="utf-8") as new:  # відкриваємо файл у форматі запису
        for i_word in user_string:
            new.write(f"{i_word}\n")  # записуємо значення у файл


def start_countdown(string_user):
    """
    Програма запитує, з якого числа починати відлік
    функція split переводить значення типу (str) в значення типу (list)
    :param string_user: це значення, з яким працює програма
    :return: 0 або 1, відповідно до того, яке значення обере користувач
    """
    string_user = string_user  # записуємо значення, з яким працює програма
    print("Зараз вам необхідно обрати, яким чином програма буде рахувати слова.\n"
          "Тобто, якщо є рядок символів\n"
          "\n"
          "{line}\n".format(line="-"*40),
          "\n{str_user}\n".format(str_user=string_user),  # виводимо, значення, з яким працює програма
          "\n"
          "{line}\n".format(line="-"*40),
          "\n"
          "то за що вважати непарну позицію?\n"
          "Відлік починаєть з нуля чи з одиниці\n"
          "Тобто слово '{first_word}' вважати як 1 чи 0\n".format(first_word=string_user.split()[0]),
          "\nВведіть, будь ласка, '1' або '0'")
    num = input(">>> ")
    # перевірка
    if num.strip() == '0':
        return int(num)
    elif num.strip() == "1":
        return int(num)
    print("Ви допустили помилку! Спробуйте ще раз. Та слідкуйте за вказівками на екрані!")
    return start_countdown(string_user)  # якщо, щось пішло не так, то повторно запустити функцію, зі значенням з яким працює програма


def main():
    """
    Головна функція програми, яка отримує значення з інших функцій та робить перетворення слів
    """
    string = menu()  # запитуємо у користувача, де взяти дані (самостійно ввести чи отримати з файлу, чи взагалі вийти)
    string_list = string.split()  # перетворюємо ці значення в тип (list) за допомогою функції split
    start_num = start_countdown(string)  # запитуємо у користувача з якого значення починаємо рахувати

    # Структура, яка показана нижче називається 'List comprehension'. Це одна з важливіших можливостей Python
    # Ця структура повертає значення типу (list), приймаючи в себе також параметр значення (list), в даному випадку, це string_list
    # Основна особливість цієї структури, те що вона працює дуже швидко і не треба писати окрему функцію або цикл для виконання роботи.
    list_str = [i_str[::-1] for i_str in string_list[start_num::2]]
    print("Результат:")
    if len(list_str) == 0:
        print("Попередження! Немає значень для відповіді. Тому зараз ви отримаєте пустий список!")
    print(*list_str)  # Виводимо на екран користувача всі значення, які отримали
    print()
    if need_to_save():  # запитуємо чи треба зберігати значення
        save_str(list_str)  # зберігаємо значення
    print("Дякую, що скористалися програмою!\n")


#  Теж особливість Python, це перевірка чи імпортується файл чи ні. Якщо файл відразу запустити, то програма буде працювати.
#  Якщо ж імпортувати цей файл, то цей фрагмент коду буде ігноруватися
if __name__ == "__main__":
    print(greeting())
    while True:
        main()